# This is a basic workflow to help you get started with Actions

name: Build Release Zip

# Controls when the workflow will run
on:
  workflow_dispatch
  # Triggers the workflow on push or pull request events but only for the master branch
  #push:
    #branches: [ main ]
   # tags:
    # - "v*"

env:
  PROJECT_FILE: mitoSoft.homeNet.ArduinoIDE.csproj
  PROJECT_FOLDER: mitoSoft.homeNet.ArduinoIDE
  ZIP_FILENAME: ArduinoDeployment.zip
  
jobs:
  deploys:
    runs-on: windows-latest
    steps:     
      - uses: actions/checkout@v2 
      
      - id: getversion
        uses: actions/github-script@v5
        with:
          script: |
            const version = "${{ github.ref }}".split('/')[2].replace('v','').replace('V','').replace('version','').replace('Version','')
            core.setOutput('version', version)
            
      - run: echo "${{steps.getversion.outputs.version}}"
      
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
      
      - run: dotnet build ${{ env.PROJECT_FOLDER }}/${{ env.PROJECT_FILE }} -c Release /p:Version=${{steps.getversion.outputs.version}}
            
      - run: dotnet publish ${{ env.PROJECT_FOLDER }}/${{ env.PROJECT_FILE }} -c Release --no-build
      
      - uses: vimtor/action-zip@v1
        with:
          files:  ${{ env.PROJECT_FOLDER }}/bin/Release/net9.0-windows/publish/
          recursive: true
          dest:  ${{ env.ZIP_FILENAME }}
                
      - name: Build Release
        id: create_release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.RELEASE_TOKEN }}"
          prerelease: false
                  
      - uses: csexton/release-asset-action@v2
        with:
           github-token: ${{ secrets.RELEASE_TOKEN }}
           pattern: ${{ github.workspace }}/${{ env.ZIP_FILENAME }}
           release-url: ${{ steps.create_release.outputs.upload_url }}           
